---
alwaysApply: true
description: 데이터베이스 상호작용은 항상 Drizzle ORM과 정의된 스키마를 사용해야 합니다.
---

# Drizzle 데이터베이스 상호작용 규칙

이 프로젝트의 모든 데이터베이스 상호작용은 **Drizzle ORM**을 사용해야 합니다.

## 필수 사항

### 1. 데이터베이스 클라이언트 사용
```typescript
import { db } from '@/db';
```
- 모든 데이터베이스 쿼리는 [src/db/index.ts](mdc:src/db/index.ts)에서 내보낸 `db` 클라이언트를 사용해야 합니다.

### 2. 스키마 임포트
```typescript
import { 
  rssSources, 
  articles, 
  articleSummaries, 
  userProfiles, 
  userInteractions,
  scrappedArticles,
  recommendations,
  comments,
  commentLikes 
} from '@/db/schema';
```
- 모든 테이블 정의는 [src/db/schema.ts](mdc:src/db/schema.ts)에서 가져와야 합니다.

### 3. Drizzle 쿼리 사용
- **금지**: 직접적인 SQL 쿼리나 raw SQL 사용
- **필수**: Drizzle ORM의 쿼리 빌더 사용

#### 올바른 예시:
```typescript
// SELECT 쿼리
const allArticles = await db.select().from(articles);

// WHERE 조건
import { eq } from 'drizzle-orm';
const userArticles = await db
  .select()
  .from(articles)
  .where(eq(articles.rssSourceId, sourceId));

// INSERT
await db.insert(articles).values({
  title: '제목',
  content: '내용',
  url: 'https://example.com',
  publishedAt: new Date(),
});

// UPDATE
await db
  .update(articles)
  .set({ title: '수정된 제목' })
  .where(eq(articles.id, articleId));

// DELETE
await db
  .delete(articles)
  .where(eq(articles.id, articleId));
```

#### 잘못된 예시:
```typescript
// ❌ 직접 SQL 쿼리
await db.execute(sql`SELECT * FROM articles`);

// ❌ 다른 ORM 사용
await prisma.article.findMany();

// ❌ 스키마 파일 없이 테이블 정의
const customTable = pgTable('custom', { ... });
```

## 사용 가능한 테이블

[src/db/schema.ts](mdc:src/db/schema.ts)에 정의된 테이블들:

- `rssSources`: RSS 피드 소스 관리
- `articles`: 수집된 기사 데이터
- `articleSummaries`: AI 생성 기사 요약 및 키워드
- `userProfiles`: Clerk 사용자 프로필 정보
- `userInteractions`: 사용자-기사 상호작용 기록
- `scrappedArticles`: 사용자 스크랩 기사
- `recommendations`: 개인화 추천 기사
- `comments`: 기사 댓글
- `commentLikes`: 댓글 좋아요

## 관계형 쿼리

테이블 간 관계가 있는 쿼리는 Drizzle의 조인 기능을 사용하세요:

```typescript
import { eq } from 'drizzle-orm';

// 기사와 함께 요약 정보 가져오기
const articlesWithSummaries = await db
  .select()
  .from(articles)
  .leftJoin(articleSummaries, eq(articles.id, articleSummaries.articleId));
```

## 타입 안전성

Drizzle ORM은 TypeScript와 완벽하게 통합되므로 모든 쿼리는 타입 안전합니다. 스키마에 정의된 타입을 활용하세요.

## 마이그레이션

데이터베이스 스키마 변경은 [drizzle.config.ts](mdc:drizzle.config.ts) 설정을 기반으로 Drizzle Kit을 사용하여 관리됩니다.
